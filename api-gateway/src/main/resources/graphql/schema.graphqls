scalar Long

type Query {
    users: [User]
    recentUsers(count: Int!): [User]
    usersKafka: [User]
    recentUsersKafka(count: Int!): [User]

    products: [Product]
    recentProducts(count: Int!): [Product]
    productsKafka: [Product]
    recentProductsKafka(count: Int!): [Product]

    orders: [Order]
    recentOrders(count: Int!): [Order]
    ordersKafka: [Order]
    recentOrdersKafka(count: Int!): [Order]
}

type Mutation {
    generateUsers(count: Int!): [User]
    generateProducts(count: Int!): [Product]
    generateOrders(count: Int!): [Order]
}

type User {
    id: ID!
    name: String!
    email: String!
}

type Product {
    id: ID!
    name: String!
    description: String
    price: Float!
    stock: Int!
}

type Order {
    id: ID!
    userId: Long!
    productId: Long!
    quantity: Int!
    status: String!
}