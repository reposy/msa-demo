services:
  config-service:
    image: eclipse-temurin:21-jdk-alpine
    volumes:
      - ./config-service/build/libs/config-service-0.0.1-SNAPSHOT.jar:/app/app.jar
      - log-data:/var/log/app
    command: ["java", "-jar", "/app/app.jar"]
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8888/actuator/health"]
      interval: 3s
      timeout: 2s
      retries: 5

  dashboard-service:
    image: eclipse-temurin:21-jdk-alpine
    depends_on:
      config-service:
        condition: service_healthy
    volumes:
      - ./dashboard-service/build/libs/dashboard-service-0.0.1-SNAPSHOT.jar:/app/app.jar
      - log-data:/var/log/app
    command: ["java", "-jar", "/app/app.jar"]
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888

  order-service:
    image: eclipse-temurin:21-jdk-alpine
    depends_on:
      config-service:
        condition: service_healthy
    volumes:
      - ./order-service/build/libs/order-service-0.0.1-SNAPSHOT.jar:/app/app.jar
      - log-data:/var/log/app
    command: ["java", "-jar", "/app/app.jar"]
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888

  product-service:
    image: eclipse-temurin:21-jdk-alpine
    depends_on:
      config-service:
        condition: service_healthy
    volumes:
      - ./product-service/build/libs/product-service-0.0.1-SNAPSHOT.jar:/app/app.jar
      - log-data:/var/log/app
    command: ["java", "-jar", "/app/app.jar"]
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888

  user-service:
    image: eclipse-temurin:21-jdk-alpine
    depends_on:
      config-service:
        condition: service_healthy
    volumes:
      - ./user-service/build/libs/user-service-0.0.1-SNAPSHOT.jar:/app/app.jar
      - log-data:/var/log/app
    command: ["java", "-jar", "/app/app.jar"]
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888

  api-gateway:
    image: eclipse-temurin:21-jdk-alpine
    depends_on:
      config-service:
        condition: service_healthy
    volumes:
      - ./api-gateway/build/libs/api-gateway-0.0.1-SNAPSHOT.jar:/app/app.jar
      - log-data:/var/log/app
    command: ["java", "-jar", "/app/app.jar"]
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888
      - USER_SERVICE_URL=http://user-service:8083
      - ORDER_SERVICE_URL=http://order-service:8081
      - PRODUCT_SERVICE_URL=http://product-service:8082

  postgres-user:
    image: postgres:17.4
    container_name: postgres-user
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  postgres-product:
    image: postgres:17.4
    container_name: postgres-product
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: product
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"

  postgres-order:
    image: postgres:17.4
    container_name: postgres-order
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: order
      POSTGRES_PASSWORD: secret
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - api-gateway

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # 보안 인증 해제 (테스트용)
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # 메모리 제한 설정
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    volumes:
      - kibana-data:/usr/share/kibana/data

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - log-data:/var/log/app:ro # 애플리케이션 로그 파일 경로
    depends_on:
      - logstash
    command: [ "filebeat", "-e", "-strict.perms=false" ]

volumes:
  log-data:
    driver: local
  postgres-user-data:
  postgres-product-data:
  postgres-order-data:
  grafana-data:
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local